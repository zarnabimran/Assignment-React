[{"/home/gigalabs/Documents/Assignment/Reactjs/my-app/src/App.js":"1","/home/gigalabs/Documents/Assignment/Reactjs/my-app/src/index.js":"2","/home/gigalabs/Documents/Assignment/Reactjs/my-app/src/components/UserEditor.js":"3","/home/gigalabs/Documents/Assignment/Reactjs/my-app/src/reportWebVitals.js":"4","/home/gigalabs/Documents/Assignment/Reactjs/my-app/src/websiteGlobals/globals.js":"5","/home/gigalabs/Documents/Assignment/Reactjs/my-app/src/components/Modals/UserCard.js":"6","/home/gigalabs/Documents/Assignment/Reactjs/my-app/src/components/Modals/UpdateModal.js":"7","/home/gigalabs/Documents/Assignment/Reactjs/my-app/src/components/Children/UpdateForm.js":"8"},{"size":220,"mtime":1608280634154,"results":"9","hashOfConfig":"10"},{"size":521,"mtime":1608209140103,"results":"11","hashOfConfig":"10"},{"size":1193,"mtime":1608283900443,"results":"12","hashOfConfig":"10"},{"size":362,"mtime":1608033192981,"results":"13","hashOfConfig":"10"},{"size":220,"mtime":1608214855327,"results":"14","hashOfConfig":"10"},{"size":5329,"mtime":1608284157335,"results":"15","hashOfConfig":"10"},{"size":1318,"mtime":1608295894706,"results":"16","hashOfConfig":"10"},{"size":3047,"mtime":1608287127867,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"4q0ptw",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},"/home/gigalabs/Documents/Assignment/Reactjs/my-app/src/App.js",[],["40","41"],"/home/gigalabs/Documents/Assignment/Reactjs/my-app/src/index.js",[],["42","43"],"/home/gigalabs/Documents/Assignment/Reactjs/my-app/src/components/UserEditor.js",[],"/home/gigalabs/Documents/Assignment/Reactjs/my-app/src/reportWebVitals.js",[],["44","45"],"/home/gigalabs/Documents/Assignment/Reactjs/my-app/src/websiteGlobals/globals.js",[],["46","47"],"/home/gigalabs/Documents/Assignment/Reactjs/my-app/src/components/Modals/UserCard.js",["48","49","50"],"import React, { useState, useMemo, useEffect } from \"react\";\nimport { Card, Row, Col } from \"antd\";\nimport UpdateModal from \"../Modals/UpdateModal\";\nimport { Alert } from \"antd\";\nimport \"antd/dist/antd.css\";\n\nimport {\n  EditOutlined,\n  DeleteFilled,\n  HeartOutlined,\n  HeartFilled,\n  MailOutlined,\n  PhoneOutlined,\n  GlobalOutlined,\n} from \"@ant-design/icons\";\n\nconst UserCards = ({ users }) => {\n  const [showModal, setshowModal] = useState(false);\n  const [updateData, setupdateData] = useState();\n  const [userInfo, setUserInfo] = useState(null);\n\n  const showModalHandler = (id) => {\n    const user = users.filter((user) => user._id === id);\n    setupdateData(user);\n    setshowModal(true);\n  };\n\n  useEffect(() => {\n    setUserInfo(users);\n  }, [users]);\n  useMemo(() => {}, [updateData]);\n\n  useEffect(() => {}, [userInfo]);\n\n  const closeModalHandler = () => {\n    setshowModal(false);\n  };\n\n  const updateUser = (data) => {\n    let newData = users.map((userdata) => {\n      if (userdata._id === data.id) {\n        userdata.name = data.name;\n        userdata.emailAddress = data.emailAddress;\n        userdata.website = data.website;\n        userdata.phoneNumber = data.phoneNumber;\n        return userdata;\n      }\n      return userdata;\n    });\n    setUserInfo(newData);\n  };\n\n  const toggleHandler = (data) => {\n    let newData = users.map((userdata) => {\n      if (userdata._id === data._id) {\n        if (userdata.check === true) {\n          userdata.check = false;\n          return userdata;\n        }\n        userdata.check = true;\n        return userdata;\n      }\n      return userdata;\n    });\n    setUserInfo(newData);\n  };\n\n  const deleteHandler = (data) => {\n\n    const newData = userInfo.filter((user) => user._id != data._id);\n    setUserInfo(newData);\n  };\n\n  return (\n    <div className=\"card\">\n      <Row>\n        {userInfo != null\n          ? userInfo.map((data) => {\n              return (\n                <Col span={6} key={data._id}>\n                  <Card\n                    // style={{ width: 440, height: 459.5, margin: 15 }}\n                    className=\"Card\"\n                    cover={\n                      <img\n                        alt=\"example\"\n                        className=\"cardhead\"\n                        src={`https://avatars.dicebear.com/v2/avataaars/{{${data.userName}}}.svg?options[mood][]=happy`}\n                        style={{ height: 200 }}\n                      />\n                    }\n                    actions={\n                      data.check\n                        ? [\n                            <HeartFilled\n                              onClick={() => toggleHandler(data)}\n                              style={{\n                                fontSize: `20px`,\n                                color: `rgb(255, 0, 0)`,\n                              }}\n                            />,\n                            <EditOutlined\n                              key=\"edit\"\n                              onClick={() => showModalHandler(data._id)}\n                              id={data._id}\n                            />,\n                            <DeleteFilled\n                              onClick={() => deleteHandler(data)}\n                            />,\n                          ]\n                        : [\n                            <HeartOutlined\n                              onClick={() => toggleHandler(data)}\n                              style={{\n                                fontSize: `20px`,\n                                color: `rgb(255, 0, 0)`,\n                              }}\n                            />,\n                            <EditOutlined\n                              key=\"edit\"\n                              onClick={() => showModalHandler(data._id)}\n                              id={data._id}\n                            />,\n                            <DeleteFilled\n                              onClick={() => deleteHandler(data)}\n                            />,\n                          ]\n                    }\n                  >\n                    <div className=\"card-body\">\n                      <div className=\"name\">\n                        <strong>{data.name}</strong>\n                      </div>\n                      <div>\n                        <span className=\"icons\">\n                          <MailOutlined />\n                        </span>\n                        <span>{data.emailAddress}</span>\n                      </div>\n                      <div>\n                        <span className=\"icons\">\n                          <PhoneOutlined />\n                        </span>\n                        <span>{data.phoneNumber}</span>{\" \"}\n                      </div>\n                      <div>\n                        <span className=\"icons\">\n                          <GlobalOutlined />\n                        </span>\n                        <span>{data.website}</span>{\" \"}\n                      </div>\n                    </div>\n                  </Card>\n                </Col>\n              );\n            })\n          : null}\n      </Row>\n      {showModal ? (\n        <UpdateModal\n          showing={showModal}\n          onClose={closeModalHandler}\n          data={updateData}\n          updateUser={updateUser}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nexport default UserCards;\n","/home/gigalabs/Documents/Assignment/Reactjs/my-app/src/components/Modals/UpdateModal.js",[],"/home/gigalabs/Documents/Assignment/Reactjs/my-app/src/components/Children/UpdateForm.js",["51","52","53","54"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Input, Button } from \"antd\";\nimport \"antd/dist/antd.css\";\n\nlet regex = new RegExp(\n  /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n);\n\nconst UserForm = ({ data, onSubmit, onClose }) => {\n\n  const [name, setName] = useState(data[0].name);\n  const [email, setEmail] = useState(data[0].emailAddress);\n  const [phone, setPhone] = useState(data[0].phoneNumber);\n  const [website, setWebsite] = useState(data[0].website);\n  useEffect(() => {}, [data]);\n\n  const changeHandler = (event) => {\n    console.log(\"event\", event);\n\n    switch (event.target.name) {\n      case \"name\":\n        setName(event.target.value);\n        break;\n\n      case \"email\":\n        setEmail(event.target.value);\n        break;\n\n      case \"phone\":\n        setPhone(event.target.value);\n        break;\n\n      case \"website\":\n        setWebsite(event.target.value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = (data) => {\n    if (!email.match(regex)) {\n      return;\n    }\n    if (!name || !phone || !website || !email) {\n      return;\n    }\n    const updatedData = {\n      id: data[0]._id,\n      name: name,\n      phoneNumber: phone,\n      emailAddress: email,\n      website: website,\n    };\n\n    onSubmit(updatedData);\n  };\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  return (\n    <div className=\"update-forms\">\n      <Form\n        name=\"basic\"\n        initialValues={data[0]}\n        // form={/}\n        layout=\"Horizontal\"\n      >\n        <Form.Item\n          label=\"Username\"\n          name=\"name\"\n          rules={[{ required: true, message: \"This field is required\" }]}\n        >\n          <Input onChange={changeHandler} name=\"name\" />\n        </Form.Item>\n\n        <Form.Item\n          label=\"email\"\n          name=\"emailAddress\"\n          rules={[\n            {\n              type: `email`,\n              required: true,\n              message: \"Invalid email\",\n            },\n          ]}\n        >\n          <Input onChange={changeHandler} name=\"email\" />\n        </Form.Item>\n\n        <Form.Item\n          label=\"phone\"\n          name=\"phoneNumber\"\n          rules={[{ required: true, message: \"This field is required\" }]}\n        >\n          <Input onChange={changeHandler} name=\"phone\" />\n        </Form.Item>\n\n        <Form.Item\n          label=\"website\"\n          name=\"website\"\n          rules={[\n            {\n              required: true,\n              message: \"This field is required\",\n            },\n          ]}\n        >\n          <Input onChange={changeHandler} name=\"website\" />\n        </Form.Item>\n        <div className=\"modal-buttons\">\n          <Button className=\"submit\" onClick={() => handleSubmit(data)}>\n            Submit\n          </Button>\n          <Button className=\"Close\" onClick={() => handleClose}>\n            Close\n          </Button>\n        </div>\n      </Form>\n    </div>\n  );\n};\n\nexport default UserForm;\n",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"55","replacedBy":"59"},{"ruleId":"57","replacedBy":"60"},{"ruleId":"55","replacedBy":"61"},{"ruleId":"57","replacedBy":"62"},{"ruleId":"55","replacedBy":"63"},{"ruleId":"57","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":4,"column":10,"nodeType":"67","messageId":"68","endLine":4,"endColumn":15},{"ruleId":"69","severity":1,"message":"70","line":31,"column":21,"nodeType":"71","endLine":31,"endColumn":33,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":70,"column":56,"nodeType":"75","messageId":"76","endLine":70,"endColumn":58},{"ruleId":"77","severity":1,"message":"78","line":6,"column":25,"nodeType":"79","messageId":"80","endLine":6,"endColumn":26,"suggestions":"81"},{"ruleId":"77","severity":1,"message":"78","line":6,"column":50,"nodeType":"79","messageId":"80","endLine":6,"endColumn":51,"suggestions":"82"},{"ruleId":"77","severity":1,"message":"78","line":6,"column":59,"nodeType":"79","messageId":"80","endLine":6,"endColumn":60,"suggestions":"83"},{"ruleId":"77","severity":1,"message":"78","line":6,"column":63,"nodeType":"79","messageId":"80","endLine":6,"endColumn":64,"suggestions":"84"},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],["85"],["86"],["85"],["86"],["85"],["86"],"no-unused-vars","'Alert' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useMemo has an unnecessary dependency: 'updateData'. Either exclude it or remove the dependency array.","ArrayExpression",["87"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["88","89"],["90","91"],["92","93"],["94","95"],"no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},{"messageId":"98","fix":"99","desc":"100"},{"messageId":"101","fix":"102","desc":"103"},{"messageId":"98","fix":"104","desc":"100"},{"messageId":"101","fix":"105","desc":"103"},{"messageId":"98","fix":"106","desc":"100"},{"messageId":"101","fix":"107","desc":"103"},{"messageId":"98","fix":"108","desc":"100"},{"messageId":"101","fix":"109","desc":"103"},"Update the dependencies array to be: []",{"range":"110","text":"111"},"removeEscape",{"range":"112","text":"113"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"114","text":"115"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"116","text":"113"},{"range":"117","text":"115"},{"range":"118","text":"113"},{"range":"119","text":"115"},{"range":"120","text":"113"},{"range":"121","text":"115"},[780,792],"[]",[174,175],"",[174,174],"\\",[199,200],[199,199],[208,209],[208,208],[212,213],[212,212]]